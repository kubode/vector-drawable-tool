buildscript {
    ext.kotlin_version = '1.2.71'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.3.0-alpha13"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.example.checker"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0-beta02'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-beta02'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task createIconsArrayResource {
    File drawableDir = new File(project.projectDir, "src/main/res/drawable")
    StringBuilder builder = new StringBuilder()
    builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
    builder.append("<resources>\n")
    builder.append("    <array name=\"icons\">\n")
    drawableDir.listFiles().each { File file ->
        String resName = file.name.replaceAll("\\.xml", "")
        builder.append("        <item>@drawable/$resName</item>\n")
    }
    builder.append("    </array>\n")
    builder.append("</resources>\n")
    File iconsFile = new File(project.projectDir, "src/main/res/values/icons.xml")
    iconsFile.write(builder.toString())
}

afterEvaluate {
    tasks.compileDebugSources.dependsOn createIconsArrayResource
}
